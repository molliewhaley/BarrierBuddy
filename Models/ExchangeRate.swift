//
//  ExchangeRate.swift
//  BarrierBuddyApp
//
//  Created by Mollie Whaley on 9/16/23.
//

import Foundation

struct ExchangeRate: Codable {
    let rates: [String: Double]
}

extension ExchangeRate {
    var updatedDictionaryValues: [String: Any] {
        var updatedDictionary = [String: Any]()
        for (key, value) in rates {
            let flag: String
            let symbol: String
            let placement: Placement
            
            switch key {
            case "JPY":
                symbol = "Â¥"
                placement = .before
                flag = "ðŸ‡¯ðŸ‡µ"
            case "USD":
                symbol = "$"
                placement = .before
                flag = "ðŸ‡ºðŸ‡¸"
            case "EUR":
                symbol = "â‚¬"
                placement = .after
                flag = "ðŸ‡©ðŸ‡ª"
            case "PLN":
                symbol = "zÅ‚"
                placement = .before
                flag = "ðŸ‡µðŸ‡±"
            case "RUB":
                symbol = "â‚½"
                placement = .after
                flag = "ðŸ‡·ðŸ‡º"
            case "TRY":
                symbol = "â‚º"
                placement = .after
                flag = "ðŸ‡¹ðŸ‡·"
            case "DKK":
                symbol = "kr"
                placement = .before
                flag = "ðŸ‡©ðŸ‡°"
            case "ESP":
                symbol = "Pt"
                placement = .after
                flag = "ðŸ‡ªðŸ‡¸"
            case "NOK":
                symbol = "kr"
                placement = .before
                flag = "ðŸ‡³ðŸ‡´"
            case "CHF":
                symbol = "â‚£"
                placement = .before
                flag = "ðŸ‡¨ðŸ‡­"
            case "SEK":
                symbol = "kr"
                placement = .before
                flag = "ðŸ‡¸ðŸ‡ª"
            case "GBP":
                symbol = "Â£"
                placement = .before
                flag = "ðŸ‡¬ðŸ‡§"
            default:
                symbol = "?"
                placement = .before
                flag = ""
            }
            updatedDictionary[key] = ["flag": flag, "amount": value, "placement": placement, "symbol": symbol] as [String : Any]
        }
        return updatedDictionary
    }
}

enum Placement {
    case before
    case after
}

struct CurrencyInfo: Hashable {
    let currencyKey: String
    let flag: String
    let amount: Double
    let placement: Placement
    let symbol: String 
}
